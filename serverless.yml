service: rest-api

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  timeout: 10
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: '*'
functions:
  create:
    handler: functions/normal-connection/normal-connection.create
    events:
      - http:
          path: notes
          method: post
          cors: true
  getOne:
    handler: functions/normal-connection/normal-connection.getOne
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
  getAll:
    handler: functions/normal-connection/normal-connection.getAll
    events:
     - http:
         path: notes
         method: get
         cors: true
  getAllProxy:
    handler: functions/proxy-connection/proxy-connection.getAllProxy
    events:
      - http:
          path: notes-proxy
          method: get
          cors: true
  getOneProxy:
    handler: functions/proxy-connection/proxy-connection.getOneProxy
    events:
      - http:
          path: notes-proxy/{id}
          method: get
          cors: true
  update:
    handler: functions/normal-connection/normal-connection.update
    events:
     - http:
         path: notes/{id}
         method: put
         cors: true
  delete:
    handler: functions/normal-connection/normal-connection.delete
    events:
     - http:
         path: notes/{id}
         method: delete
         cors: true
  mongo-db-proxy:
    handler: functions/mongo-db-proxy/mongo-db-proxy.mongodbproxy
plugins:
  - serverless-offline